<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-4.1.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:database.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${yy.database.driverClass}" />
		<property name="url" value="${yy.database.url}" />
		<property name="username" value="${yy.database.username}" />
		<property name="password" value="${yy.database.password}" />
	</bean>

	<!-- <bean id="dataSource" -->
	<!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
	<!-- <property name="url" value="jdbc:mysql://127.0.0.1:3306/fm" /> -->
	<!-- <property name="username" value="root" /> -->
	<!-- <property name="password" value="JIE102320" /> -->
	<!-- </bean> -->

	<!-- 2.配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- <property name="dataSource" ref="dataSource" /> -->
		<!-- <property name="hibernateProperties"> -->
		<!-- <props> -->
		<!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop> -->

		<!-- <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> -->
		<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
		<!-- <prop key="hibernate.show_sql">true</prop> -->
		<!-- <prop key="hibernate.format_sql">false</prop> -->

		<!-- </props> -->
		<!-- </property> -->

		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.autoReconnect">{hibernate.auto.reconnect}</prop>
				<prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
				<prop key="jdbc.use_scrollable_resultset">${jdbc.use_scrollable_resultset}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.user_second_level_cache">${hibernate.cache.user_second_level_cache}</prop>
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
			</props>
		</property>

		<!-- 配置config -->
		<!-- <property name="configLocations"> -->
		<!-- <list> -->
		<!-- 拿到注解的配置文件目录 -->
		<!-- 引用在hibernate.cfg.xml里面配置好的java -->
		<!-- <value> -->
		<!-- classpath*:hibernate.cfg.xml -->
		<!-- </value> -->
		<!-- </list> -->
		<!-- </property> -->
	</bean>



	<!-- 配置事务管理器 -->
	<!-- <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"> -->
	<!-- <property name="sessionFactory" ref="sessionFactory"></property> -->
	<!-- </bean> -->
	<!-- <tx:annotation-driven transaction-manager="txManager"/> -->

	<!-- 配置事务 -->
	<!-- 1.拦截事务；2.基于事务类的代理类；3.注解 -->
	<bean id="transctionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">

		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 事务特性描述，用抽象类（基类）代理事务 ,spring-tx-4.0.0.M3.jar -->
	<!-- interceptor拦截器，负责拦截事务 -->
	<!-- lazy-init="true"懒加载 -->
	<!-- abstract="true" 是否是抽象类，提供给其他类继承 -->
	<bean id="transactionBase"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		lazy-init="true" abstract="true">
		<!-- 配置描述的事务 -->
		<property name="transactionManager" ref="transctionManager" />
		<!-- 配置属性 -->
		<property name="transactionAttributes">
			<props>
				<!-- 配置用哪些方法可以开始事务 -->
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="sav*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="get*">PROPAGATION_NEVER,readOnly,-Exception</prop>
				<prop key="find*">PROPAGATION_NEVER,readOnly,-Exception</prop>

			</props>
		</property>
		<!-- PROPAGATION:传播 MANDATORY：强制的，托管的 PROPAGATION_REQUIRED : 支持当前事务，如果没有就新建一个 
			PROPAGATION_SUPPORTS :支持当前事务，如果没有就以非事务方式执行 PROPAGATION_MANDATORY : 支持当前事务，如果没有就抛出异常 
			PROPAGATION_REQUIRES_NEW : 新事物，如果当前存在事务，将当前事务挂起 PROPAGATION_NOT_SUPPORTS 
			:以非事务的方式执行，如果当前存在事务，将当前事务挂起 PROPAGATION_NEVER : 以非事务的方式执行，如果当前存在事务就抛出异常 PROPAGATION_NESTED 
			: 如果存在当前事务就在嵌套事务内执行吗如果当前没有，则进行与 <prop key="get">PROPAGATION_REQUIRED,readOnly,-Exception 
			</prop> readOnly保证执行get时数据不会跟新（查询中） Exception 当有exception抛出时，事务回滚 - 表示回滚 
			+ 表示提交 -->
	</bean>

</beans>
